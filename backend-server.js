const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');
const path = require('path');
const fs = require('fs');

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 3000;

// üìÅ –°–æ–∑–¥–∞–µ–º HTML –Ω–∞–ø—Ä—è–º—É—é –µ—Å–ª–∏ –ø–∞–ø–∫–∏ public –Ω–µ—Ç
function serveFrontend() {
    const publicPath = path.join(__dirname, 'public');
    
    if (fs.existsSync(publicPath)) {
        // –ï—Å–ª–∏ –ø–∞–ø–∫–∞ public —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        app.use(express.static(publicPath));
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ public');
    } else {
        // –ï—Å–ª–∏ –ø–∞–ø–∫–∏ public –Ω–µ—Ç - –æ—Ç–¥–∞–µ–º HTML –Ω–∞–ø—Ä—è–º—É—é
        console.log('üìÅ –ü–∞–ø–∫–∞ public –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–¥–∞–µ–º HTML –Ω–∞–ø—Ä—è–º—É—é');
        
        app.get('/', (req, res) => {
            const html = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Discord</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh; display: flex; justify-content: center; align-items: center; padding: 20px;
        }
        .container { width: 100%; max-width: 500px; }
        .card { 
            background: white; border-radius: 15px; padding: 40px; 
            box-shadow: 0 20px 40px rgba(0,0,0,0.1); backdrop-filter: blur(10px);
        }
        .header { text-align: center; margin-bottom: 30px; }
        h1 { color: #333; margin-bottom: 10px; font-size: 2rem; }
        .subtitle { color: #666; font-size: 1rem; }
        .form { margin-bottom: 20px; }
        .form-group { margin-bottom: 20px; }
        label { display: block; margin-bottom: 8px; color: #333; font-weight: 600; }
        input, textarea, select { 
            width: 100%; padding: 12px 16px; border: 2px solid #e1e5e9; border-radius: 8px; 
            font-size: 16px; transition: all 0.3s ease; font-family: inherit;
        }
        input:focus, textarea:focus, select:focus { 
            outline: none; border-color: #667eea; box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        textarea { resize: vertical; min-height: 100px; }
        .avatar-options { 
            display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; margin-top: 10px;
        }
        .avatar-option { 
            border: 2px solid #e1e5e9; border-radius: 8px; padding: 10px; text-align: center;
            cursor: pointer; transition: all 0.3s ease;
        }
        .avatar-option:hover { border-color: #667eea; }
        .avatar-option.selected { border-color: #667eea; background: #f0f4ff; }
        .avatar-emoji { font-size: 24px; margin-bottom: 5px; }
        .avatar-name { font-size: 12px; color: #666; }
        .custom-avatar-input { margin-top: 10px; }
        .send-button { 
            width: 100%; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; 
            border: none; padding: 15px 20px; border-radius: 8px; font-size: 16px; font-weight: 600; 
            cursor: pointer; transition: all 0.3s ease; margin-top: 10px;
        }
        .send-button:hover { transform: translateY(-2px); box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3); }
        .send-button:disabled { opacity: 0.6; cursor: not-allowed; transform: none; }
        .status { margin-top: 20px; padding: 15px; border-radius: 8px; text-align: center; font-weight: 500; display: none; }
        .status.success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; display: block; }
        .status.error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; display: block; }
        .status.loading { background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; display: block; }
        .info { margin-top: 30px; padding: 20px; background: #f8f9fa; border-radius: 8px; border-left: 4px solid #667eea; }
        .info h3 { color: #333; margin-bottom: 10px; }
        .info ol { margin-left: 20px; color: #555; }
        .info li { margin-bottom: 5px; }
        @media (max-width: 600px) { 
            .card { padding: 30px 20px; } 
            h1 { font-size: 1.5rem; }
            .avatar-options { grid-template-columns: repeat(2, 1fr); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <div class="header">
                <h1>üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Discord</h1>
                <p class="subtitle">–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–Ω–æ –ø—Ä–∏–¥–µ—Ç –Ω–∞ –≤–∞—à Discord —Å–µ—Ä–≤–µ—Ä</p>
            </div>

            <form id="messageForm" class="form">
                <div class="form-group">
                    <label for="username">–í–∞—à–µ –∏–º—è:</label>
                    <input type="text" id="username" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è" value="–ì–æ—Å—Ç—å" required>
                </div>
                
                <div class="form-group">
                    <label for="message">–°–æ–æ–±—â–µ–Ω–∏–µ:</label>
                    <textarea id="message" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." rows="4" required></textarea>
                </div>
                
                <div class="form-group">
                    <label>–ê–≤–∞—Ç–∞—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:</label>
                    <div class="avatar-options" id="avatarOptions">
                        <div class="avatar-option" data-avatar="üë§" data-url="">
                            <div class="avatar-emoji">üë§</div>
                            <div class="avatar-name">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</div>
                        </div>
                        <div class="avatar-option" data-avatar="ü§ñ" data-url="">
                            <div class="avatar-emoji">ü§ñ</div>
                            <div class="avatar-name">–ë–æ—Ç</div>
                        </div>
                        <div class="avatar-option" data-avatar="üéÆ" data-url="">
                            <div class="avatar-emoji">üéÆ</div>
                            <div class="avatar-name">–ì–µ–π–º–µ—Ä</div>
                        </div>
                        <div class="avatar-option" data-avatar="üë®‚Äçüíª" data-url="">
                            <div class="avatar-emoji">üë®‚Äçüíª</div>
                            <div class="avatar-name">–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</div>
                        </div>
                        <div class="avatar-option" data-avatar="üé®" data-url="">
                            <div class="avatar-emoji">üé®</div>
                            <div class="avatar-name">–•—É–¥–æ–∂–Ω–∏–∫</div>
                        </div>
                        <div class="avatar-option" data-avatar="üìö" data-url="">
                            <div class="avatar-emoji">üìö</div>
                            <div class="avatar-name">–°—Ç—É–¥–µ–Ω—Ç</div>
                        </div>
                    </div>
                    
                    <div class="custom-avatar-input">
                        <label for="customAvatarUrl">–ò–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–≤–æ—é –∞–≤–∞—Ç–∞—Ä–∫—É:</label>
                        <input type="text" id="customAvatarUrl" placeholder="https://example.com/avatar.png">
                        <small>–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å emoji –∞–≤–∞—Ç–∞—Ä–∫—É</small>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="webhookUrl">Webhook URL:</label>
                    <input type="text" id="webhookUrl" placeholder="https://discord.com/api/webhooks/..." required>
                    <small>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–ª—É—á–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Discord —Å–µ—Ä–≤–µ—Ä–∞.</small>
                </div>
                
                <button type="submit" id="sendBtn" class="send-button">üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Discord</button>
            </form>
            
            <div id="status" class="status"></div>
            
            <div class="info">
                <h3>üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Webhook URL:</h3>
                <ol>
                    <li>–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Discord —Å–µ—Ä–≤–µ—Ä–∞</li>
                    <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏" ‚Üí "Webhooks"</li>
                    <li>–ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å webhook" –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π</li>
                    <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL webhook –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –≤—ã—à–µ</li>
                </ol>
                
                <h3 style="margin-top: 15px;">üñºÔ∏è –ü—Ä–æ –∞–≤–∞—Ç–∞—Ä–∫–∏:</h3>
                <ul>
                    <li>–í—ã–±–µ—Ä–∏—Ç–µ emoji –∞–≤–∞—Ç–∞—Ä–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞</li>
                    <li>–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏</li>
                    <li>–ê–≤–∞—Ç–∞—Ä–∫–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ Discord —Ä—è–¥–æ–º —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º</li>
                </ul>
            </div>
        </div>
    </div>

    <script>
        class DiscordWebhookSender {
            constructor() {
                this.sendBtn = document.getElementById('sendBtn');
                this.statusDiv = document.getElementById('status');
                this.messageForm = document.getElementById('messageForm');
                this.selectedAvatar = 'üë§';
                this.customAvatarUrl = '';
                
                this.initializeApp();
            }
            
            initializeApp() {
                this.messageForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.processMessageSending();
                });
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
                this.initAvatarSelection();
                
                // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
                document.getElementById('customAvatarUrl').addEventListener('input', (e) => {
                    this.customAvatarUrl = e.target.value.trim();
                    if (this.customAvatarUrl) {
                        this.clearAvatarSelection();
                    }
                });
            }
            
            initAvatarSelection() {
                const avatarOptions = document.querySelectorAll('.avatar-option');
                
                avatarOptions.forEach(option => {
                    option.addEventListener('click', () => {
                        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö options
                        avatarOptions.forEach(opt => opt.classList.remove('selected'));
                        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é
                        option.classList.add('selected');
                        
                        this.selectedAvatar = option.getAttribute('data-avatar');
                        this.customAvatarUrl = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
                        document.getElementById('customAvatarUrl').value = '';
                    });
                });
                
                // –í—ã–±–∏—Ä–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                avatarOptions[0].classList.add('selected');
            }
            
            clearAvatarSelection() {
                const avatarOptions = document.querySelectorAll('.avatar-option');
                avatarOptions.forEach(opt => opt.classList.remove('selected'));
                this.selectedAvatar = '';
            }
            
            async processMessageSending() {
                const username = document.getElementById('username').value.trim();
                const message = document.getElementById('message').value.trim();
                const webhookUrl = document.getElementById('webhookUrl').value.trim();
                const customAvatarUrl = document.getElementById('customAvatarUrl').value.trim();
                
                if (!username || !message || !webhookUrl) {
                    this.displayStatusMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
                    return;
                }

                if (!webhookUrl.includes('discord.com/api/webhooks/')) {
                    this.displayStatusMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Webhook URL', 'error');
                    return;
                }

                this.displayStatusMessage('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...', 'loading');
                this.sendBtn.disabled = true;

                try {
                    const requestData = {
                        username: username,
                        message: message,
                        webhookUrl: webhookUrl,
                        avatar: this.selectedAvatar,
                        avatarUrl: customAvatarUrl || ''
                    };

                    const response = await fetch('/api/send-to-discord', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(requestData)
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        this.displayStatusMessage('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord!', 'success');
                        document.getElementById('message').value = '';
                    } else {
                        this.displayStatusMessage('‚ùå ' + data.error, 'error');
                    }
                    
                } catch (error) {
                    this.displayStatusMessage('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
                    console.error('–û—à–∏–±–∫–∞:', error);
                } finally {
                    this.sendBtn.disabled = false;
                }
            }
            
            displayStatusMessage(message, type) {
                this.statusDiv.textContent = message;
                this.statusDiv.className = 'status ' + type;
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            new DiscordWebhookSender();
        });
    </script>
</body>
</html>
            `;
            res.send(html);
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
serveFrontend();

// üì® API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏)
app.post('/api/send-to-discord', async (req, res) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', req.body);
    
    try {
        const { username, message, webhookUrl, avatar, avatarUrl } = req.body;

        if (!username || !message || !webhookUrl) {
            return res.status(400).json({
                success: false,
                error: '–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
            });
        }

        if (!webhookUrl.includes('discord.com/api/webhooks/')) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Webhook URL'
            });
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è Discord
        const discordPayload = {
            username: username.substring(0, 80),
            content: message.substring(0, 2000)
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if (avatarUrl) {
            discordPayload.avatar_url = avatarUrl;
        } else if (avatar) {
            // –î–ª—è emoji –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å–æ–∑–¥–∞–µ–º embed —Å –∏–∫–æ–Ω–∫–æ–π
            discordPayload.embeds = [
                {
                    title: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username}`,
                    description: message.substring(0, 2000),
                    color: 0x667eea,
                    timestamp: new Date().toISOString(),
                    thumbnail: {
                        url: this.getAvatarIcon(avatar)
                    },
                    fields: [
                        { name: "üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", value: username, inline: true },
                        { name: "üïí –í—Ä–µ–º—è", value: new Date().toLocaleString('ru-RU'), inline: true },
                        { name: "üñºÔ∏è –ê–≤–∞—Ç–∞—Ä", value: avatar, inline: true }
                    ],
                    footer: {
                        text: "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Webhook App",
                        icon_url: this.getAvatarIcon(avatar)
                    }
                }
            ];
            // –£–±–∏—Ä–∞–µ–º content –µ—Å–ª–∏ –µ—Å—Ç—å embed
            delete discordPayload.content;
        } else {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ—Å–æ–±–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
            discordPayload.embeds = [
                {
                    title: "üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    description: message.substring(0, 2000),
                    color: 0x667eea,
                    timestamp: new Date().toISOString(),
                    fields: [
                        { name: "üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", value: username, inline: true },
                        { name: "üïí –í—Ä–µ–º—è", value: new Date().toLocaleString('ru-RU'), inline: true }
                    ]
                }
            ];
            delete discordPayload.content;
        }

        console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Discord —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π:', avatar || avatarUrl);

        const discordResponse = await fetch(webhookUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(discordPayload)
        });

        if (discordResponse.ok) {
            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord');
            res.json({ 
                success: true, 
                message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                avatarUsed: avatar || avatarUrl || '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'
            });
        } else {
            const errorText = await discordResponse.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ Discord:', discordResponse.status, errorText);
            res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ Discord: ' + discordResponse.status
            });
        }

    } catch (error) {
        console.error('‚ùå –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
function getAvatarIcon(emoji) {
    const emojiIcons = {
        'üë§': 'https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f464.svg',
        'ü§ñ': 'https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f916.svg',
        'üéÆ': 'https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f3ae.svg',
        'üë®‚Äçüíª': 'https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f468-200d-1f4bb.svg',
        'üé®': 'https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f3a8.svg',
        'üìö': 'https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f4da.svg'
    };
    return emojiIcons[emoji] || 'https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f464.svg';
}

// üìä –°—Ç–∞—Ç—É—Å API
app.get('/api/status', (req, res) => {
    res.json({
        success: true,
        message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ',
        timestamp: new Date().toISOString(),
        features: ['send-messages', 'custom-avatars', 'emoji-avatars']
    });
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    console.log(`
üéâ Discord App —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏ –∑–∞–ø—É—â–µ–Ω!
üìç –ü–æ—Ä—Ç: ${PORT}
üåê –°—Ä–µ–¥–∞: ${process.env.NODE_ENV || 'development'}
üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
    `);
});
